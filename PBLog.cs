// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Log.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cls
{

    /// <summary>Holder for reflection information generated from Log.proto</summary>
    public static partial class LogReflection
    {

        #region Descriptor
        /// <summary>File descriptor for Log.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static LogReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CglMb2cucHJvdG8SA2NscyJeCgNMb2cSDAoEdGltZRgBIAEoAxIiCghjb250",
                  "ZW50cxgCIAMoCzIQLmNscy5Mb2cuQ29udGVudBolCgdDb250ZW50EgsKA2tl",
                  "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCSJZCghMb2dHcm91cBIWCgRsb2dzGAEg",
                  "AygLMgguY2xzLkxvZxITCgtjb250ZXh0RmxvdxgCIAEoCRIQCghmaWxlbmFt",
                  "ZRgDIAEoCRIOCgZzb3VyY2UYBCABKAkiMwoMTG9nR3JvdXBMaXN0EiMKDGxv",
                  "Z0dyb3VwTGlzdBgBIAMoCzINLmNscy5Mb2dHcm91cGIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cls.Log), global::Cls.Log.Parser, new[]{ "Time", "Contents" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cls.Log.Types.Content), global::Cls.Log.Types.Content.Parser, new[]{ "Key", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cls.LogGroup), global::Cls.LogGroup.Parser, new[]{ "Logs", "ContextFlow", "Filename", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cls.LogGroupList), global::Cls.LogGroupList.Parser, new[]{ "LogGroupList_" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Log : pb::IMessage<Log>
    {
        private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Log> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Cls.LogReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log(Log other) : this()
        {
            time_ = other.time_;
            contents_ = other.contents_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log Clone()
        {
            return new Log(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        private long time_;
        /// <summary>
        /// UNIX Time Format
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Time
        {
            get { return time_; }
            set
            {
                time_ = value;
            }
        }

        /// <summary>Field number for the "contents" field.</summary>
        public const int ContentsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Cls.Log.Types.Content> _repeated_contents_codec
            = pb::FieldCodec.ForMessage(18, global::Cls.Log.Types.Content.Parser);
        private readonly pbc::RepeatedField<global::Cls.Log.Types.Content> contents_ = new pbc::RepeatedField<global::Cls.Log.Types.Content>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Cls.Log.Types.Content> Contents
        {
            get { return contents_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Log);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Log other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Time != other.Time) return false;
            if (!contents_.Equals(other.contents_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Time != 0L) hash ^= Time.GetHashCode();
            hash ^= contents_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Time != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Time);
            }
            contents_.WriteTo(output, _repeated_contents_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Time != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
            }
            size += contents_.CalculateSize(_repeated_contents_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Log other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Time != 0L)
            {
                Time = other.Time;
            }
            contents_.Add(other.contents_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Time = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            contents_.AddEntriesFrom(input, _repeated_contents_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Log message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Content : pb::IMessage<Content>
            {
                private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Content> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Cls.Log.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Content()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Content(Content other) : this()
                {
                    key_ = other.key_;
                    value_ = other.value_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Content Clone()
                {
                    return new Content(this);
                }

                /// <summary>Field number for the "key" field.</summary>
                public const int KeyFieldNumber = 1;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key
                {
                    get { return key_; }
                    set
                    {
                        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private string value_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Value
                {
                    get { return value_; }
                    set
                    {
                        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Content);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Content other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Key != other.Key) return false;
                    if (Value != other.Value) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Key.Length != 0) hash ^= Key.GetHashCode();
                    if (Value.Length != 0) hash ^= Value.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Key.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Key);
                    }
                    if (Value.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Value);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Key.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
                    }
                    if (Value.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Content other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Key.Length != 0)
                    {
                        Key = other.Key;
                    }
                    if (other.Value.Length != 0)
                    {
                        Value = other.Value;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Key = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    Value = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class LogGroup : pb::IMessage<LogGroup>
    {
        private static readonly pb::MessageParser<LogGroup> _parser = new pb::MessageParser<LogGroup>(() => new LogGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LogGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Cls.LogReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroup()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroup(LogGroup other) : this()
        {
            logs_ = other.logs_.Clone();
            contextFlow_ = other.contextFlow_;
            filename_ = other.filename_;
            source_ = other.source_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroup Clone()
        {
            return new LogGroup(this);
        }

        /// <summary>Field number for the "logs" field.</summary>
        public const int LogsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Cls.Log> _repeated_logs_codec
            = pb::FieldCodec.ForMessage(10, global::Cls.Log.Parser);
        private readonly pbc::RepeatedField<global::Cls.Log> logs_ = new pbc::RepeatedField<global::Cls.Log>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Cls.Log> Logs
        {
            get { return logs_; }
        }

        /// <summary>Field number for the "contextFlow" field.</summary>
        public const int ContextFlowFieldNumber = 2;
        private string contextFlow_ = "";
        /// <summary>
        /// 保持上下文用的UID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContextFlow
        {
            get { return contextFlow_; }
            set
            {
                contextFlow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "filename" field.</summary>
        public const int FilenameFieldNumber = 3;
        private string filename_ = "";
        /// <summary>
        /// 文件名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Filename
        {
            get { return filename_; }
            set
            {
                filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "source" field.</summary>
        public const int SourceFieldNumber = 4;
        private string source_ = "";
        /// <summary>
        /// 日志来源，一般使用机器IP
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Source
        {
            get { return source_; }
            set
            {
                source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LogGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LogGroup other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!logs_.Equals(other.logs_)) return false;
            if (ContextFlow != other.ContextFlow) return false;
            if (Filename != other.Filename) return false;
            if (Source != other.Source) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= logs_.GetHashCode();
            if (ContextFlow.Length != 0) hash ^= ContextFlow.GetHashCode();
            if (Filename.Length != 0) hash ^= Filename.GetHashCode();
            if (Source.Length != 0) hash ^= Source.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            logs_.WriteTo(output, _repeated_logs_codec);
            if (ContextFlow.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ContextFlow);
            }
            if (Filename.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Filename);
            }
            if (Source.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Source);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += logs_.CalculateSize(_repeated_logs_codec);
            if (ContextFlow.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextFlow);
            }
            if (Filename.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
            }
            if (Source.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LogGroup other)
        {
            if (other == null)
            {
                return;
            }
            logs_.Add(other.logs_);
            if (other.ContextFlow.Length != 0)
            {
                ContextFlow = other.ContextFlow;
            }
            if (other.Filename.Length != 0)
            {
                Filename = other.Filename;
            }
            if (other.Source.Length != 0)
            {
                Source = other.Source;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            logs_.AddEntriesFrom(input, _repeated_logs_codec);
                            break;
                        }
                    case 18:
                        {
                            ContextFlow = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Filename = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Source = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LogGroupList : pb::IMessage<LogGroupList>
    {
        private static readonly pb::MessageParser<LogGroupList> _parser = new pb::MessageParser<LogGroupList>(() => new LogGroupList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LogGroupList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Cls.LogReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroupList()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroupList(LogGroupList other) : this()
        {
            logGroupList_ = other.logGroupList_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LogGroupList Clone()
        {
            return new LogGroupList(this);
        }

        /// <summary>Field number for the "logGroupList" field.</summary>
        public const int LogGroupList_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Cls.LogGroup> _repeated_logGroupList_codec
            = pb::FieldCodec.ForMessage(10, global::Cls.LogGroup.Parser);
        private readonly pbc::RepeatedField<global::Cls.LogGroup> logGroupList_ = new pbc::RepeatedField<global::Cls.LogGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Cls.LogGroup> LogGroupList_
        {
            get { return logGroupList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LogGroupList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LogGroupList other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!logGroupList_.Equals(other.logGroupList_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= logGroupList_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            logGroupList_.WriteTo(output, _repeated_logGroupList_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += logGroupList_.CalculateSize(_repeated_logGroupList_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LogGroupList other)
        {
            if (other == null)
            {
                return;
            }
            logGroupList_.Add(other.logGroupList_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            logGroupList_.AddEntriesFrom(input, _repeated_logGroupList_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
